/**
 * This is a TypeScript port of the original Lua (Scribunto) module by User:Mkpoli (same individual as this projects' author) and User:BrassSnail, with modifications to comply the common Ainu kanaization conventions
 * The original Lua module is available under the CC BY-SA 3.0 license
 * https://ja.wiktionary.org/w/index.php?title=%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB:ain-kana-conv&oldid=1814571
 */

import { separate } from "../syllable";

// const AINU_LATN_WORD_PATTERN = /([a-zA-Z\p‚Äô'\-=‚àÖ√∏]+)/;

import { ACCENT_CONVERSION_TABLE, clean } from "./latin";

const CONVERSION_TABLE = {
	a: "„Ç¢",
	i: "„Ç§",
	u: "„Ç¶",
	e: "„Ç®",
	o: "„Ç™",
	"'a": "„Ç¢",
	"'i": "„Ç§",
	"'u": "„Ç¶",
	"'e": "„Ç®",
	"'o": "„Ç™",
	ka: "„Ç´",
	ki: "„Ç≠",
	ku: "„ÇØ",
	ke: "„Ç±",
	ko: "„Ç≥",
	sa: "„Çµ",
	si: "„Ç∑",
	su: "„Çπ",
	se: "„Çª",
	so: "„ÇΩ",
	ta: "„Çø",
	tu: "„Éà„Çö",
	te: "„ÉÜ",
	to: "„Éà",
	ca: "„ÉÅ„É£",
	ci: "„ÉÅ",
	cu: "„ÉÅ„É•",
	ce: "„ÉÅ„Çß",
	co: "„ÉÅ„Éß",
	CA: "„Çµ„Çö",
	CU: "„Çπ„Çö",
	CE: "„Çª„Çö",
	CO: "„ÇΩ„Çö",
	na: "„Éä",
	ni: "„Éã",
	nu: "„Éå",
	ne: "„Éç",
	no: "„Éé",
	ha: "„Éè",
	hi: "„Éí",
	hu: "„Éï",
	he: "„Éò",
	ho: "„Éõ",
	pa: "„Éë",
	pi: "„Éî",
	pu: "„Éó",
	pe: "„Éö",
	po: "„Éù",
	ma: "„Éû",
	mi: "„Éü",
	mu: "„É†",
	me: "„É°",
	mo: "„É¢",
	ya: "„É§",
	yi: "„Ç§",
	yu: "„É¶",
	ye: "„Ç§„Çß",
	yo: "„É®",
	ra: "„É©",
	ri: "„É™",
	ru: "„É´",
	re: "„É¨",
	ro: "„É≠",
	wa: "„ÉØ",
	wi: "„É∞",
	we: "„É±",
	wo: "„É≤",
	nn: "„É≥",
	tt: "„ÉÉ",
} as const;

const CODA_CONS = {
	w: "„Ç•",
	y: "„Ç£",
	m: "„á∫",
	n: "„á¥",
	N: "õÖß",
	s: "„á±",
	S: "„á≤",
	p: "„á∑„Çö",
	t: "„ÉÉ",
	T: "„á≥",
	k: "„á∞",
} as const;
// const CODA_VARA: Record<string, Record<string, string>> = {
//   "r": {
//     "a": "„áª", "i": "„áº", "u": "„áΩ", "e": "„áæ", "o": "„áø"
//   },
//   "h": {
//     "a": "„áµ", "i": "„á∂", "u": "„á∑", "e": "„á∏", "o": "„áπ"
//   },
//   "x": {
//     "a": "„áµ", "i": "„á∂", "u": "„á∑", "e": "„á∏", "o": "„áπ"
//   }
// };

const CODA_VARA = {
	r: {
		a: "„áª",
		i: "„áº",
		u: "„áΩ",
		e: "„áæ",
		o: "„áø",
	},
	h: {
		a: "„áµ",
		i: "„á∂",
		u: "„á∑",
		e: "„á∏",
		o: "„áπ",
	},
	x: {
		a: "„áµ",
		i: "„á∂",
		u: "„á∑",
		e: "„á∏",
		o: "„áπ",
	},
} as const;

const VARIANT_TABLE = {
	// "„Éà„Çö": ["„ÉÑ„Çö", "„Éà„Ç•"],
	„á¥: ["„É≥"],
	„É±: ["„Ç¶„Çß"],
	„É∞: ["„Ç¶„Ç£"],
	„É≤: ["„Ç¶„Ç©"],
	„á∑„Çö„Éë: ["„ÉÉ„Éë"],
	„á∑„Çö„Éî: ["„ÉÉ„Éî"],
	„á∑„Çö„Éö: ["„ÉÉ„Éö"],
	„á∑„Çö„Éó: ["„ÉÉ„Éó"],
	„á∑„Çö„Éù: ["„ÉÉ„Éù"],
	„á∞„Ç´: ["„ÉÉ„Ç´"],
	„á∞„Ç≠: ["„ÉÉ„Ç≠"],
	„á∞„Ç±: ["„ÉÉ„Ç±"],
	„á∞„ÇØ: ["„ÉÉ„ÇØ"],
	„á∞„Ç≥: ["„ÉÉ„Ç≥"],
	„Ç£: ["„Ç§"],
	„Ç•: ["„Ç¶"],
	// „áª: ['„áΩ'],
	// „áº: ['„áΩ'],
	// „áæ: ['„áΩ'],
	// „áø: ['„áΩ'],
} as const;

// const applyVariants = (
// 	result: string,
// 	variantKeys: string[],
// 	index: number,
// ): string[] => {
// 	if (index > variantKeys.length) {
// 		return [result];
// 	}

// 	const original = variantKeys[index];
// 	const variations = VARIANT_TABLE[original]!;
// 	const allResults = [
// 		result,
// 		...variations.map((variation) => result.replace(original, variation)),
// 	];

// 	let finalResults: string[] = [];
// 	allResults.forEach((res) => {
// 		finalResults = [
// 			...finalResults,
// 			...applyVariants(res, variantKeys, index + 1),
// 		];
// 	});

// 	return finalResults;
// };

// const generateVariants = (target: string): string[] => {
//   const variantKeys = Object.keys(VARIANT_TABLE).filter(original => target.includes(original));
//   return applyVariants(target, variantKeys, 0);
// }

/**
 * Convert Latin script to Katakana script.
 *
 * The original Lua module is available under the CC BY-SA 3.0 license
 * https://ja.wiktionary.org/w/index.php?title=%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB:ain-kana-conv&oldid=1814571
 *
 * @param latn The Latin script string to convert.
 * @returns The Katakana script string.
 */
export function convertLatnToKana(latn: string): string {
	const cleanedLatn = clean(latn).toLowerCase();

	const syllables = separate(cleanedLatn);
	let result = syllables
		.map((syllable, index): string => {
			const nextChar = syllables[index + 1];
			if (syllable.length === 0) {
				return "";
			}

			let remains = syllable;
			let coda = "";

			const lastChar = syllable[syllable.length - 1];

			// console.log(lastChar);

			function isCodaCons(char: string): char is keyof typeof CODA_CONS {
				return char in CODA_CONS;
			}

			function isCodaVara(char: string): char is keyof typeof CODA_VARA {
				return char in CODA_VARA;
			}

			function isSecondLastChar(
				char: string,
			): char is keyof (typeof CODA_VARA)[keyof typeof CODA_VARA] {
				return char in CODA_VARA[lastChar as keyof typeof CODA_VARA];
			}

			if (isCodaCons(lastChar)) {
				// Ends with a coda consonant with no variants
				remains = remains.slice(0, -1);
				coda = CODA_CONS[lastChar];
				if (lastChar === "n" && nextChar) {
					coda = CONVERSION_TABLE.nn;
				}
			} else if (isCodaVara(lastChar)) {
				remains = remains.slice(0, -1);
				const secondLastChar = syllable[syllable.length - 2];
				if (!isSecondLastChar(secondLastChar)) {
					throw new Error(`invalid coda variant: ‚Äò${syllable}‚Äô`);
				}
				coda = CODA_VARA[lastChar][secondLastChar];
			}

			// console.log(`remains = "${remains}", coda = "${coda}"`);

			// let accentedFlag = false;
			const nucleus = remains[remains.length - 1];

			if (nucleus in ACCENT_CONVERSION_TABLE) {
				// accentedFlag = true;
				remains = remains.slice(0, -1) + ACCENT_CONVERSION_TABLE[nucleus];
			}

			if (remains.startsWith("‚Äô")) {
				remains = remains.slice(1);
			}

			function isNucleus(char: string): char is keyof typeof CONVERSION_TABLE {
				return char in CONVERSION_TABLE;
			}

			if (isNucleus(remains)) {
				remains = CONVERSION_TABLE[remains];
			} else {
				const lowerRemains = remains.toLowerCase();
				if (isNucleus(lowerRemains)) {
					remains = CONVERSION_TABLE[lowerRemains];
				} else {
					throw new Error(`cannot find katakana for CV pair: ‚Äò${remains}‚Äô`);
				}
			}

			const converted = remains + coda;

			// if (accentedFlag) {
			//   converted = `<u style='text-decoration:overline;'>${converted}</u>`;
			// }
			return converted;
		})
		.join("");

	// Postprocess
	for (const [variant, replacement] of Object.entries(VARIANT_TABLE)) {
		result = result.replaceAll(variant, replacement[0]);
	}

	return result;
	// TODO: Make configurable
}

const DIAGRAPHS: Record<string, string> = {
	„Ç¶„Çß: "we",
	„Ç¶„Ç£: "wi",
	„Ç¶„Ç©: "wo",
	„Éà„Ç•: "tu",
	„Ç§„Çß: "ye",
	„Ç®„Ç§: "ey",
	„Ç™„Ç§: "oy",
	„Ç¶„Ç§: "uy",
};

/**
 * Convert Katakana script to Latin script.
 * @param kana The Katakana string to convert.
 * @returns The Latin string.
 */
export function convertKanaToLatn(kana: string): string {
	// console.log(new RegExp(`${Object.keys(DIAGRAPHS).join('|')}|(\\p{Script_Extensions=Katakana}\u309a?)`, 'u'));
	return (
		kana
			.split(
				new RegExp(
					`(${Object.keys(DIAGRAPHS).join("|")}|\\p{Script_Extensions=Katakana}\u309a?)`,
					"u",
				),
			)
			// .split(/(\\p{Script_Extensions=Katakana}\u309a?)
			.filter(Boolean)
			.map((char) => {
				let result = char;
				if (result === "„É≥") return "n";
				if (result in DIAGRAPHS) return DIAGRAPHS[result];
				for (const [key, value] of Object.entries(CONVERSION_TABLE)) {
					result = result.replace(value, key);
				}
				// console.log(char);
				for (const [key, value] of Object.entries(CODA_CONS)) {
					result = result.replace(value, key);
				}
				for (const [key, value] of Object.entries(CODA_VARA)) {
					for (const [, value2] of Object.entries(value)) {
						result = result.replace(value2, key);
					}
				}
				for (const [key, value] of [
					["„Çß", "e"],
					["„Ç°", "a"],
					["„Ç£", "i"],
					["„Ç•", "u"],
					["„Ç©", "o"],
				]) {
					result = result.replace(key, value);
				}
				return result;
			})
			.join("‚Äô")
			.replace(/(?<![^aieou])‚Äô/g, "") // If the previous character is not a vowel, remove the apostrophe\
			// If the next character is not a vowel, remove the apostrophe
			.replace(/‚Äô(?![aieou])/g, "")
		// .replace(/(?=[^aieou])‚Äô(?<=[^aieou])/g, '')
	);
	// .replace(/([aueo])i/, '$1y')
	// .replace(/([aieo])u/, '$1w')
	// .replace(/u([aieo])/, 'w$1')
	// .replace(/i([aueo])/, 'y$1');
	// for (const [variant, replacement] of Object.entries(VARIANT_TABLE)) {
	//   kana = kana.replace(variant, replacement[0]);
	// }
	// return kana;
}
